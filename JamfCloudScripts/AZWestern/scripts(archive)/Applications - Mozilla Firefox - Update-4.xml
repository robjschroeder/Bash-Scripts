<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script>
    <id>4</id>
    <name>Applications - Mozilla Firefox - Update</name>
    <category>Browsers</category>
    <filename>Applications - Mozilla Firefox - Update</filename>
    <info></info>
    <notes></notes>
    <priority>After</priority>
    <parameters></parameters>
    <os_requirements></os_requirements>
    <script_contents>#!/bin/sh
#####################################################################################################
#
# NAME: UpdateFirefox.sh -- Installs or updates Mozilla Firefox
# Robert Schroeder 02.13.20147
#
####################################################################################################
# Only works on Intel systems.
#
# choose language (en-US, fr, de)
lang=""
# CHECK TO SEE IF A VALUE WAS PASSED IN PARAMETER 1 AND, IF SO, ASSIGN TO "lang"
if [ "$4" != "" ] &amp;&amp; [ "$lang" == "" ]; then
	lang=$4
else 
	lang="en-US"
fi

dmgfile="FF.dmg"
logfile="/Library/Logs/FirefoxInstallScript.log"

# Are we running on Intel?
if [ '`/usr/bin/uname -p`'="i386" -o '`/usr/bin/uname -p`'="x86_64" ]; then
	## Get OS version and adjust for use with the URL string
	OSvers_URL=$( sw_vers -productVersion | sed 's/[.]/_/g' )

	## Set the User Agent string for use with curl
	userAgent="Mozilla/5.0 (Macintosh; Intel Mac OS X ${OSvers_URL}) AppleWebKit/535.6.2 (KHTML, like Gecko) Version/5.2 Safari/535.6.2"

	# Get the latest version of Reader available from Firefox page.
	latestver=`/usr/bin/curl -s -A "$userAgent" https://www.mozilla.org/${lang}/firefox/new/ | grep 'data-latest-firefox' | sed -e 's/.* data-latest-firefox="\(.*\)".*/\1/' -e 's/\"//' | /usr/bin/awk '{print $1}'`
	echo "Latest Version is: $latestver"

	# Get the version number of the currently-installed FF, if any.
	if [ -e "/Applications/Firefox.app" ]; then
		currentinstalledver=`/usr/bin/defaults read /Applications/Firefox.app/Contents/Info CFBundleShortVersionString`
		echo "Current installed version is: $currentinstalledver"
		if [ ${latestver} = ${currentinstalledver} ]; then
			echo "Firefox is current. Exiting"
			exit 0
		fi
	else
		currentinstalledver="none"
		echo "Firefox is not installed"
	fi

	url="https://download-installer.cdn.mozilla.net/pub/firefox/releases/${latestver}/mac/${lang}/Firefox%20${latestver}.dmg"
	
	echo "Latest version of the URL is: $url"
	echo "`date`: Download URL: $url" &gt;&gt; ${logfile}

	# Compare the two versions, if they are different or Firefox is not present then download and install the new version.
	if [ "${currentinstalledver}" != "${latestver}" ]; then
        /bin/echo "`date`: Current Firefox version: ${currentinstalledver}" &gt;&gt; ${logfile}
		/bin/echo "`date`: Available Firefox version: ${latestver}" &gt;&gt; ${logfile}
		/bin/echo "`date`: Downloading newer version." &gt;&gt; ${logfile}
		/usr/bin/curl -s -o /tmp/${dmgfile} ${url}
		/bin/echo "`date`: Mounting installer disk image." &gt;&gt; ${logfile}
		/usr/bin/hdiutil attach /tmp/${dmgfile} -nobrowse -quiet
		/bin/echo "`date`: Installing..." &gt;&gt; ${logfile}
		ditto -rsrc "/Volumes/Firefox/Firefox.app" "/Applications/Firefox.app"
		
		/bin/sleep 10
		/bin/echo "`date`: Unmounting installer disk image." &gt;&gt; ${logfile}
		/usr/bin/hdiutil detach $(/bin/df | /usr/bin/grep Firefox | awk '{print $1}') -quiet
		/bin/sleep 10
		/bin/echo "`date`: Deleting disk image." &gt;&gt; ${logfile}
		/bin/rm /tmp/${dmgfile}
		
		#double check to see if the new version got updated
		newlyinstalledver=`/usr/bin/defaults read /Applications/Firefox.app/Contents/Info CFBundleShortVersionString`
        if [ "${latestver}" = "${newlyinstalledver}" ]; then
            /bin/echo "`date`: SUCCESS: Firefox has been updated to version ${newlyinstalledver}" &gt;&gt; ${logfile}
	   # /Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper -windowType hud -title "Firefox Installed" -description "Firefox has been updated." &amp;
        else
            /bin/echo "`date`: ERROR: Firefox update unsuccessful, version remains at ${currentinstalledver}." &gt;&gt; ${logfile}
            /bin/echo "--" &gt;&gt; ${logfile}
			exit 1
		fi
    
	# If Firefox is up to date already, just log it and exit.       
	else
		/bin/echo "`date`: Firefox is already up to date, running ${currentinstalledver}." &gt;&gt; ${logfile}
        /bin/echo "--" &gt;&gt; ${logfile}
	fi	
else
	/bin/echo "`date`: ERROR: This script is for Intel Macs only." &gt;&gt; ${logfile}
fi

exit 0</script_contents>
    <script_contents_encoded>IyEvYmluL3NoCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBOQU1FOiBVcGRhdGVGaXJlZm94LnNoIC0tIEluc3RhbGxzIG9yIHVwZGF0ZXMgTW96aWxsYSBGaXJlZm94CiMgUm9iZXJ0IFNjaHJvZWRlciAwMi4xMy4yMDE0NwojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBPbmx5IHdvcmtzIG9uIEludGVsIHN5c3RlbXMuCiMKIyBjaG9vc2UgbGFuZ3VhZ2UgKGVuLVVTLCBmciwgZGUpCmxhbmc9IiIKIyBDSEVDSyBUTyBTRUUgSUYgQSBWQUxVRSBXQVMgUEFTU0VEIElOIFBBUkFNRVRFUiAxIEFORCwgSUYgU08sIEFTU0lHTiBUTyAibGFuZyIKaWYgWyAiJDQiICE9ICIiIF0gJiYgWyAiJGxhbmciID09ICIiIF07IHRoZW4KCWxhbmc9JDQKZWxzZSAKCWxhbmc9ImVuLVVTIgpmaQoKZG1nZmlsZT0iRkYuZG1nIgpsb2dmaWxlPSIvTGlicmFyeS9Mb2dzL0ZpcmVmb3hJbnN0YWxsU2NyaXB0LmxvZyIKCiMgQXJlIHdlIHJ1bm5pbmcgb24gSW50ZWw/CmlmIFsgJ2AvdXNyL2Jpbi91bmFtZSAtcGAnPSJpMzg2IiAtbyAnYC91c3IvYmluL3VuYW1lIC1wYCc9Ing4Nl82NCIgXTsgdGhlbgoJIyMgR2V0IE9TIHZlcnNpb24gYW5kIGFkanVzdCBmb3IgdXNlIHdpdGggdGhlIFVSTCBzdHJpbmcKCU9TdmVyc19VUkw9JCggc3dfdmVycyAtcHJvZHVjdFZlcnNpb24gfCBzZWQgJ3MvWy5dL18vZycgKQoKCSMjIFNldCB0aGUgVXNlciBBZ2VudCBzdHJpbmcgZm9yIHVzZSB3aXRoIGN1cmwKCXVzZXJBZ2VudD0iTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggJHtPU3ZlcnNfVVJMfSkgQXBwbGVXZWJLaXQvNTM1LjYuMiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNS4yIFNhZmFyaS81MzUuNi4yIgoKCSMgR2V0IHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBSZWFkZXIgYXZhaWxhYmxlIGZyb20gRmlyZWZveCBwYWdlLgoJbGF0ZXN0dmVyPWAvdXNyL2Jpbi9jdXJsIC1zIC1BICIkdXNlckFnZW50IiBodHRwczovL3d3dy5tb3ppbGxhLm9yZy8ke2xhbmd9L2ZpcmVmb3gvbmV3LyB8IGdyZXAgJ2RhdGEtbGF0ZXN0LWZpcmVmb3gnIHwgc2VkIC1lICdzLy4qIGRhdGEtbGF0ZXN0LWZpcmVmb3g9IlwoLipcKSIuKi9cMS8nIC1lICdzL1wiLy8nIHwgL3Vzci9iaW4vYXdrICd7cHJpbnQgJDF9J2AKCWVjaG8gIkxhdGVzdCBWZXJzaW9uIGlzOiAkbGF0ZXN0dmVyIgoKCSMgR2V0IHRoZSB2ZXJzaW9uIG51bWJlciBvZiB0aGUgY3VycmVudGx5LWluc3RhbGxlZCBGRiwgaWYgYW55LgoJaWYgWyAtZSAiL0FwcGxpY2F0aW9ucy9GaXJlZm94LmFwcCIgXTsgdGhlbgoJCWN1cnJlbnRpbnN0YWxsZWR2ZXI9YC91c3IvYmluL2RlZmF1bHRzIHJlYWQgL0FwcGxpY2F0aW9ucy9GaXJlZm94LmFwcC9Db250ZW50cy9JbmZvIENGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nYAoJCWVjaG8gIkN1cnJlbnQgaW5zdGFsbGVkIHZlcnNpb24gaXM6ICRjdXJyZW50aW5zdGFsbGVkdmVyIgoJCWlmIFsgJHtsYXRlc3R2ZXJ9ID0gJHtjdXJyZW50aW5zdGFsbGVkdmVyfSBdOyB0aGVuCgkJCWVjaG8gIkZpcmVmb3ggaXMgY3VycmVudC4gRXhpdGluZyIKCQkJZXhpdCAwCgkJZmkKCWVsc2UKCQljdXJyZW50aW5zdGFsbGVkdmVyPSJub25lIgoJCWVjaG8gIkZpcmVmb3ggaXMgbm90IGluc3RhbGxlZCIKCWZpCgoJdXJsPSJodHRwczovL2Rvd25sb2FkLWluc3RhbGxlci5jZG4ubW96aWxsYS5uZXQvcHViL2ZpcmVmb3gvcmVsZWFzZXMvJHtsYXRlc3R2ZXJ9L21hYy8ke2xhbmd9L0ZpcmVmb3glMjAke2xhdGVzdHZlcn0uZG1nIgoJCgllY2hvICJMYXRlc3QgdmVyc2lvbiBvZiB0aGUgVVJMIGlzOiAkdXJsIgoJZWNobyAiYGRhdGVgOiBEb3dubG9hZCBVUkw6ICR1cmwiID4+ICR7bG9nZmlsZX0KCgkjIENvbXBhcmUgdGhlIHR3byB2ZXJzaW9ucywgaWYgdGhleSBhcmUgZGlmZmVyZW50IG9yIEZpcmVmb3ggaXMgbm90IHByZXNlbnQgdGhlbiBkb3dubG9hZCBhbmQgaW5zdGFsbCB0aGUgbmV3IHZlcnNpb24uCglpZiBbICIke2N1cnJlbnRpbnN0YWxsZWR2ZXJ9IiAhPSAiJHtsYXRlc3R2ZXJ9IiBdOyB0aGVuCiAgICAgICAgL2Jpbi9lY2hvICJgZGF0ZWA6IEN1cnJlbnQgRmlyZWZveCB2ZXJzaW9uOiAke2N1cnJlbnRpbnN0YWxsZWR2ZXJ9IiA+PiAke2xvZ2ZpbGV9CgkJL2Jpbi9lY2hvICJgZGF0ZWA6IEF2YWlsYWJsZSBGaXJlZm94IHZlcnNpb246ICR7bGF0ZXN0dmVyfSIgPj4gJHtsb2dmaWxlfQoJCS9iaW4vZWNobyAiYGRhdGVgOiBEb3dubG9hZGluZyBuZXdlciB2ZXJzaW9uLiIgPj4gJHtsb2dmaWxlfQoJCS91c3IvYmluL2N1cmwgLXMgLW8gL3RtcC8ke2RtZ2ZpbGV9ICR7dXJsfQoJCS9iaW4vZWNobyAiYGRhdGVgOiBNb3VudGluZyBpbnN0YWxsZXIgZGlzayBpbWFnZS4iID4+ICR7bG9nZmlsZX0KCQkvdXNyL2Jpbi9oZGl1dGlsIGF0dGFjaCAvdG1wLyR7ZG1nZmlsZX0gLW5vYnJvd3NlIC1xdWlldAoJCS9iaW4vZWNobyAiYGRhdGVgOiBJbnN0YWxsaW5nLi4uIiA+PiAke2xvZ2ZpbGV9CgkJZGl0dG8gLXJzcmMgIi9Wb2x1bWVzL0ZpcmVmb3gvRmlyZWZveC5hcHAiICIvQXBwbGljYXRpb25zL0ZpcmVmb3guYXBwIgoJCQoJCS9iaW4vc2xlZXAgMTAKCQkvYmluL2VjaG8gImBkYXRlYDogVW5tb3VudGluZyBpbnN0YWxsZXIgZGlzayBpbWFnZS4iID4+ICR7bG9nZmlsZX0KCQkvdXNyL2Jpbi9oZGl1dGlsIGRldGFjaCAkKC9iaW4vZGYgfCAvdXNyL2Jpbi9ncmVwIEZpcmVmb3ggfCBhd2sgJ3twcmludCAkMX0nKSAtcXVpZXQKCQkvYmluL3NsZWVwIDEwCgkJL2Jpbi9lY2hvICJgZGF0ZWA6IERlbGV0aW5nIGRpc2sgaW1hZ2UuIiA+PiAke2xvZ2ZpbGV9CgkJL2Jpbi9ybSAvdG1wLyR7ZG1nZmlsZX0KCQkKCQkjZG91YmxlIGNoZWNrIHRvIHNlZSBpZiB0aGUgbmV3IHZlcnNpb24gZ290IHVwZGF0ZWQKCQluZXdseWluc3RhbGxlZHZlcj1gL3Vzci9iaW4vZGVmYXVsdHMgcmVhZCAvQXBwbGljYXRpb25zL0ZpcmVmb3guYXBwL0NvbnRlbnRzL0luZm8gQ0ZCdW5kbGVTaG9ydFZlcnNpb25TdHJpbmdgCiAgICAgICAgaWYgWyAiJHtsYXRlc3R2ZXJ9IiA9ICIke25ld2x5aW5zdGFsbGVkdmVyfSIgXTsgdGhlbgogICAgICAgICAgICAvYmluL2VjaG8gImBkYXRlYDogU1VDQ0VTUzogRmlyZWZveCBoYXMgYmVlbiB1cGRhdGVkIHRvIHZlcnNpb24gJHtuZXdseWluc3RhbGxlZHZlcn0iID4+ICR7bG9nZmlsZX0KCSAgICMgL0xpYnJhcnkvQXBwbGljYXRpb25cIFN1cHBvcnQvSkFNRi9iaW4vamFtZkhlbHBlci5hcHAvQ29udGVudHMvTWFjT1MvamFtZkhlbHBlciAtd2luZG93VHlwZSBodWQgLXRpdGxlICJGaXJlZm94IEluc3RhbGxlZCIgLWRlc2NyaXB0aW9uICJGaXJlZm94IGhhcyBiZWVuIHVwZGF0ZWQuIiAmCiAgICAgICAgZWxzZQogICAgICAgICAgICAvYmluL2VjaG8gImBkYXRlYDogRVJST1I6IEZpcmVmb3ggdXBkYXRlIHVuc3VjY2Vzc2Z1bCwgdmVyc2lvbiByZW1haW5zIGF0ICR7Y3VycmVudGluc3RhbGxlZHZlcn0uIiA+PiAke2xvZ2ZpbGV9CiAgICAgICAgICAgIC9iaW4vZWNobyAiLS0iID4+ICR7bG9nZmlsZX0KCQkJZXhpdCAxCgkJZmkKICAgIAoJIyBJZiBGaXJlZm94IGlzIHVwIHRvIGRhdGUgYWxyZWFkeSwganVzdCBsb2cgaXQgYW5kIGV4aXQuICAgICAgIAoJZWxzZQoJCS9iaW4vZWNobyAiYGRhdGVgOiBGaXJlZm94IGlzIGFscmVhZHkgdXAgdG8gZGF0ZSwgcnVubmluZyAke2N1cnJlbnRpbnN0YWxsZWR2ZXJ9LiIgPj4gJHtsb2dmaWxlfQogICAgICAgIC9iaW4vZWNobyAiLS0iID4+ICR7bG9nZmlsZX0KCWZpCQplbHNlCgkvYmluL2VjaG8gImBkYXRlYDogRVJST1I6IFRoaXMgc2NyaXB0IGlzIGZvciBJbnRlbCBNYWNzIG9ubHkuIiA+PiAke2xvZ2ZpbGV9CmZpCgpleGl0IDA=</script_contents_encoded>
</script>