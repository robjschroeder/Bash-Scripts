<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script>
    <id>40</id>
    <name>Applications - Adobe - Flash Player - Uninstall</name>
    <category>Plug-ins</category>
    <filename>Applications - Adobe - Flash Player - Uninstall</filename>
    <info></info>
    <notes></notes>
    <priority>After</priority>
    <parameters></parameters>
    <os_requirements></os_requirements>
    <script_contents>#!/bin/bash
# shellcheck disable=SC2034

###
#
#            Name:  Uninstall Adobe Flash.sh
#     Description:  Uninstalls Adobe Flash.
#                   Attempts vendor uninstall by running all provided
#                   uninstallation commands, quits all running target processes,
#                   unloads all associated launchd tasks, disables kernel
#                   extensions, then removes all associated files.
#                   Based on uninstaller-template:
#                   https://github.com/palantir/jamf-pro-scripts/tree/master/scripts/script-templates/uninstaller-template
#         Created:  2017-10-23
#   Last Modified:  2020-07-08
#         Version:  1.3.2pal1
#
#
# Copyright 2017 Palantir Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
###



########## variable-ing ##########



# ENVIRONMENT VARIABLES (leave as-is):
scriptName=$(/usr/bin/basename "$0")
loggedInUser=$(/usr/bin/stat -f%Su "/dev/console")
# For any file paths used later in this script, use "$loggedInUserHome" for the
# current user's home folder path.
# Don't just assume the home folder is at /Users/$loggedInUser.
loggedInUserHome=$(/usr/bin/dscl . -read "/Users/$loggedInUser" NFSHomeDirectory | /usr/bin/awk '{print $NF}')
loggedInUserUID=$(/usr/bin/id -u "$loggedInUser")
currentProcesses=$(/bin/ps aux)
launchAgentCheck=$(/bin/launchctl asuser "$loggedInUserUID" /bin/launchctl list)
launchDaemonCheck=$(/bin/launchctl list)


# UNINSTALLER COMMANDS (update or comment out arrays as needed):
# A list of full commands to execute vendor-provided uninstallation workflows.
# Syntax will differ depending on how the uninstall script functions. In the
# below examples, the vendor uninstallers are shell scripts executed without
# arguments, but some vendors may use their own command-line tools, custom
# flags, or other workflows to accomplish this task (that's why this script
# exists!), so make any necessary changes to the below commands.
# If the vendor did not provide an uninstaller, comment this array out.
vendorUninstallerCommands=(
#  "sh /path/to/vendor_uninstaller_command1.sh"
#  "sh /path/to/vendor_uninstaller_command2.sh"
)


# PROCESSES:
# A list of application processes to target for quit and login item removal.
# Names should match what is displayed for the process in Activity Monitor
# (e.g. "Chess", not "Chess.app").
# If no processes need to be quit, comment this array out.
processNames=(
  "Adobe Flash Player Install Manager"
)


# FILE PATHS:
# A list of full file paths to target for launchd unload and deletion.
# If no files need to be manually deleted, comment this array out.
resourceFiles=(
  "/Applications/Utilities/Adobe Flash Player Install Manager.app"
  "/Library/Internet Plug-Ins/Flash Player.plugin"
  "/Library/Internet Plug-Ins/flashplayer.xpt"
  "/Library/PreferencePanes/Flash Player.prefPane"
  "/Library/Receipts/Adobe Flash Player.pkg"
)



########## function-ing ##########



# Run vendor uninstaller commands.
# This will fail if a command references nonexistent scripts or binaries.
function run_vendor_uninstallers {
  for vendorUninstaller in "${vendorUninstallerCommands[@]}"; do
    $vendorUninstaller
  done
}


# Quit target processes and remove associated login items.
function quit_processes {
  for process in "${processNames[@]}"; do
    if echo "$currentProcesses" | /usr/bin/grep -q "$process"; then
      /bin/launchctl asuser "$loggedInUserUID" /usr/bin/osascript -e "tell application \"$process\" to quit"
      /usr/bin/osascript -e "tell application \"System Events\" to delete every login item whose name is \"$process\""
      echo "Quit $process, removed from login items if present."
    else
      echo "$process not running."
    fi
  done
}


# Remove all remaining resource files.
function delete_files {
  for targetFile in "${resourceFiles[@]}"; do
    # if file exists
    if [[ -e "$targetFile" ]]; then
      # if file is a plist
      if [[ "$targetFile" == *".plist" ]]; then
        # if plist is loaded as LaunchAgent or LaunchDaemon, unload it
        justThePlist=$(/usr/bin/basename "$targetFile" | /usr/bin/awk -F.plist '{print $1}')
        if [[ "$launchAgentCheck" =~ $justThePlist ]]; then
          /bin/launchctl asuser "$loggedInUserUID" /bin/launchctl unload "$targetFile"
          echo "Unloaded LaunchAgent at $targetFile."
        elif [[ "$launchDaemonCheck" =~ $justThePlist ]]; then
          /bin/launchctl unload "$targetFile"
          echo "Unloaded LaunchDaemon at $targetFile."
        fi
      fi
      # disable kexts, delete all other file types
      if [[ "$targetFile" == *".kext" ]]; then
        appKextKillPath="/tmp/$scriptName"
        /bin/mkdir -p "$appKextKillPath"
        /bin/mv "$targetFile" "$appKextKillPath"
        echo "Moved $targetFile to $appKextKillPath. File will be deleted on subsequent restart."
      else
        /bin/rm -rf "$targetFile"
        echo "Removed $targetFile."
      fi
    fi
  done
}



########## main process ##########



# Each function will only execute if the respective source array is not empty
# or undefined.
if [[ -n "${vendorUninstallerCommands[*]}" ]]; then
  echo "Running vendor uninstallers..."
  run_vendor_uninstallers
fi


if [[ -n "${processNames[*]}" ]]; then
  echo "Quitting processes (if running)..."
  quit_processes
fi


if [[ -n "${resourceFiles[*]}" ]]; then
  echo "Removing files (if present)..."
  delete_files
fi



exit 0</script_contents>
    <script_contents_encoded>IyEvYmluL2Jhc2gKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CgojIyMKIwojICAgICAgICAgICAgTmFtZTogIFVuaW5zdGFsbCBBZG9iZSBGbGFzaC5zaAojICAgICBEZXNjcmlwdGlvbjogIFVuaW5zdGFsbHMgQWRvYmUgRmxhc2guCiMgICAgICAgICAgICAgICAgICAgQXR0ZW1wdHMgdmVuZG9yIHVuaW5zdGFsbCBieSBydW5uaW5nIGFsbCBwcm92aWRlZAojICAgICAgICAgICAgICAgICAgIHVuaW5zdGFsbGF0aW9uIGNvbW1hbmRzLCBxdWl0cyBhbGwgcnVubmluZyB0YXJnZXQgcHJvY2Vzc2VzLAojICAgICAgICAgICAgICAgICAgIHVubG9hZHMgYWxsIGFzc29jaWF0ZWQgbGF1bmNoZCB0YXNrcywgZGlzYWJsZXMga2VybmVsCiMgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9ucywgdGhlbiByZW1vdmVzIGFsbCBhc3NvY2lhdGVkIGZpbGVzLgojICAgICAgICAgICAgICAgICAgIEJhc2VkIG9uIHVuaW5zdGFsbGVyLXRlbXBsYXRlOgojICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxhbnRpci9qYW1mLXByby1zY3JpcHRzL3RyZWUvbWFzdGVyL3NjcmlwdHMvc2NyaXB0LXRlbXBsYXRlcy91bmluc3RhbGxlci10ZW1wbGF0ZQojICAgICAgICAgQ3JlYXRlZDogIDIwMTctMTAtMjMKIyAgIExhc3QgTW9kaWZpZWQ6ICAyMDIwLTA3LTA4CiMgICAgICAgICBWZXJzaW9uOiAgMS4zLjJwYWwxCiMKIwojIENvcHlyaWdodCAyMDE3IFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiMKIwojIyMKCgoKIyMjIyMjIyMjIyB2YXJpYWJsZS1pbmcgIyMjIyMjIyMjIwoKCgojIEVOVklST05NRU5UIFZBUklBQkxFUyAobGVhdmUgYXMtaXMpOgpzY3JpcHROYW1lPSQoL3Vzci9iaW4vYmFzZW5hbWUgIiQwIikKbG9nZ2VkSW5Vc2VyPSQoL3Vzci9iaW4vc3RhdCAtZiVTdSAiL2Rldi9jb25zb2xlIikKIyBGb3IgYW55IGZpbGUgcGF0aHMgdXNlZCBsYXRlciBpbiB0aGlzIHNjcmlwdCwgdXNlICIkbG9nZ2VkSW5Vc2VySG9tZSIgZm9yIHRoZQojIGN1cnJlbnQgdXNlcidzIGhvbWUgZm9sZGVyIHBhdGguCiMgRG9uJ3QganVzdCBhc3N1bWUgdGhlIGhvbWUgZm9sZGVyIGlzIGF0IC9Vc2Vycy8kbG9nZ2VkSW5Vc2VyLgpsb2dnZWRJblVzZXJIb21lPSQoL3Vzci9iaW4vZHNjbCAuIC1yZWFkICIvVXNlcnMvJGxvZ2dlZEluVXNlciIgTkZTSG9tZURpcmVjdG9yeSB8IC91c3IvYmluL2F3ayAne3ByaW50ICRORn0nKQpsb2dnZWRJblVzZXJVSUQ9JCgvdXNyL2Jpbi9pZCAtdSAiJGxvZ2dlZEluVXNlciIpCmN1cnJlbnRQcm9jZXNzZXM9JCgvYmluL3BzIGF1eCkKbGF1bmNoQWdlbnRDaGVjaz0kKC9iaW4vbGF1bmNoY3RsIGFzdXNlciAiJGxvZ2dlZEluVXNlclVJRCIgL2Jpbi9sYXVuY2hjdGwgbGlzdCkKbGF1bmNoRGFlbW9uQ2hlY2s9JCgvYmluL2xhdW5jaGN0bCBsaXN0KQoKCiMgVU5JTlNUQUxMRVIgQ09NTUFORFMgKHVwZGF0ZSBvciBjb21tZW50IG91dCBhcnJheXMgYXMgbmVlZGVkKToKIyBBIGxpc3Qgb2YgZnVsbCBjb21tYW5kcyB0byBleGVjdXRlIHZlbmRvci1wcm92aWRlZCB1bmluc3RhbGxhdGlvbiB3b3JrZmxvd3MuCiMgU3ludGF4IHdpbGwgZGlmZmVyIGRlcGVuZGluZyBvbiBob3cgdGhlIHVuaW5zdGFsbCBzY3JpcHQgZnVuY3Rpb25zLiBJbiB0aGUKIyBiZWxvdyBleGFtcGxlcywgdGhlIHZlbmRvciB1bmluc3RhbGxlcnMgYXJlIHNoZWxsIHNjcmlwdHMgZXhlY3V0ZWQgd2l0aG91dAojIGFyZ3VtZW50cywgYnV0IHNvbWUgdmVuZG9ycyBtYXkgdXNlIHRoZWlyIG93biBjb21tYW5kLWxpbmUgdG9vbHMsIGN1c3RvbQojIGZsYWdzLCBvciBvdGhlciB3b3JrZmxvd3MgdG8gYWNjb21wbGlzaCB0aGlzIHRhc2sgKHRoYXQncyB3aHkgdGhpcyBzY3JpcHQKIyBleGlzdHMhKSwgc28gbWFrZSBhbnkgbmVjZXNzYXJ5IGNoYW5nZXMgdG8gdGhlIGJlbG93IGNvbW1hbmRzLgojIElmIHRoZSB2ZW5kb3IgZGlkIG5vdCBwcm92aWRlIGFuIHVuaW5zdGFsbGVyLCBjb21tZW50IHRoaXMgYXJyYXkgb3V0Lgp2ZW5kb3JVbmluc3RhbGxlckNvbW1hbmRzPSgKIyAgInNoIC9wYXRoL3RvL3ZlbmRvcl91bmluc3RhbGxlcl9jb21tYW5kMS5zaCIKIyAgInNoIC9wYXRoL3RvL3ZlbmRvcl91bmluc3RhbGxlcl9jb21tYW5kMi5zaCIKKQoKCiMgUFJPQ0VTU0VTOgojIEEgbGlzdCBvZiBhcHBsaWNhdGlvbiBwcm9jZXNzZXMgdG8gdGFyZ2V0IGZvciBxdWl0IGFuZCBsb2dpbiBpdGVtIHJlbW92YWwuCiMgTmFtZXMgc2hvdWxkIG1hdGNoIHdoYXQgaXMgZGlzcGxheWVkIGZvciB0aGUgcHJvY2VzcyBpbiBBY3Rpdml0eSBNb25pdG9yCiMgKGUuZy4gIkNoZXNzIiwgbm90ICJDaGVzcy5hcHAiKS4KIyBJZiBubyBwcm9jZXNzZXMgbmVlZCB0byBiZSBxdWl0LCBjb21tZW50IHRoaXMgYXJyYXkgb3V0Lgpwcm9jZXNzTmFtZXM9KAogICJBZG9iZSBGbGFzaCBQbGF5ZXIgSW5zdGFsbCBNYW5hZ2VyIgopCgoKIyBGSUxFIFBBVEhTOgojIEEgbGlzdCBvZiBmdWxsIGZpbGUgcGF0aHMgdG8gdGFyZ2V0IGZvciBsYXVuY2hkIHVubG9hZCBhbmQgZGVsZXRpb24uCiMgSWYgbm8gZmlsZXMgbmVlZCB0byBiZSBtYW51YWxseSBkZWxldGVkLCBjb21tZW50IHRoaXMgYXJyYXkgb3V0LgpyZXNvdXJjZUZpbGVzPSgKICAiL0FwcGxpY2F0aW9ucy9VdGlsaXRpZXMvQWRvYmUgRmxhc2ggUGxheWVyIEluc3RhbGwgTWFuYWdlci5hcHAiCiAgIi9MaWJyYXJ5L0ludGVybmV0IFBsdWctSW5zL0ZsYXNoIFBsYXllci5wbHVnaW4iCiAgIi9MaWJyYXJ5L0ludGVybmV0IFBsdWctSW5zL2ZsYXNocGxheWVyLnhwdCIKICAiL0xpYnJhcnkvUHJlZmVyZW5jZVBhbmVzL0ZsYXNoIFBsYXllci5wcmVmUGFuZSIKICAiL0xpYnJhcnkvUmVjZWlwdHMvQWRvYmUgRmxhc2ggUGxheWVyLnBrZyIKKQoKCgojIyMjIyMjIyMjIGZ1bmN0aW9uLWluZyAjIyMjIyMjIyMjCgoKCiMgUnVuIHZlbmRvciB1bmluc3RhbGxlciBjb21tYW5kcy4KIyBUaGlzIHdpbGwgZmFpbCBpZiBhIGNvbW1hbmQgcmVmZXJlbmNlcyBub25leGlzdGVudCBzY3JpcHRzIG9yIGJpbmFyaWVzLgpmdW5jdGlvbiBydW5fdmVuZG9yX3VuaW5zdGFsbGVycyB7CiAgZm9yIHZlbmRvclVuaW5zdGFsbGVyIGluICIke3ZlbmRvclVuaW5zdGFsbGVyQ29tbWFuZHNbQF19IjsgZG8KICAgICR2ZW5kb3JVbmluc3RhbGxlcgogIGRvbmUKfQoKCiMgUXVpdCB0YXJnZXQgcHJvY2Vzc2VzIGFuZCByZW1vdmUgYXNzb2NpYXRlZCBsb2dpbiBpdGVtcy4KZnVuY3Rpb24gcXVpdF9wcm9jZXNzZXMgewogIGZvciBwcm9jZXNzIGluICIke3Byb2Nlc3NOYW1lc1tAXX0iOyBkbwogICAgaWYgZWNobyAiJGN1cnJlbnRQcm9jZXNzZXMiIHwgL3Vzci9iaW4vZ3JlcCAtcSAiJHByb2Nlc3MiOyB0aGVuCiAgICAgIC9iaW4vbGF1bmNoY3RsIGFzdXNlciAiJGxvZ2dlZEluVXNlclVJRCIgL3Vzci9iaW4vb3Nhc2NyaXB0IC1lICJ0ZWxsIGFwcGxpY2F0aW9uIFwiJHByb2Nlc3NcIiB0byBxdWl0IgogICAgICAvdXNyL2Jpbi9vc2FzY3JpcHQgLWUgInRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCIgdG8gZGVsZXRlIGV2ZXJ5IGxvZ2luIGl0ZW0gd2hvc2UgbmFtZSBpcyBcIiRwcm9jZXNzXCIiCiAgICAgIGVjaG8gIlF1aXQgJHByb2Nlc3MsIHJlbW92ZWQgZnJvbSBsb2dpbiBpdGVtcyBpZiBwcmVzZW50LiIKICAgIGVsc2UKICAgICAgZWNobyAiJHByb2Nlc3Mgbm90IHJ1bm5pbmcuIgogICAgZmkKICBkb25lCn0KCgojIFJlbW92ZSBhbGwgcmVtYWluaW5nIHJlc291cmNlIGZpbGVzLgpmdW5jdGlvbiBkZWxldGVfZmlsZXMgewogIGZvciB0YXJnZXRGaWxlIGluICIke3Jlc291cmNlRmlsZXNbQF19IjsgZG8KICAgICMgaWYgZmlsZSBleGlzdHMKICAgIGlmIFtbIC1lICIkdGFyZ2V0RmlsZSIgXV07IHRoZW4KICAgICAgIyBpZiBmaWxlIGlzIGEgcGxpc3QKICAgICAgaWYgW1sgIiR0YXJnZXRGaWxlIiA9PSAqIi5wbGlzdCIgXV07IHRoZW4KICAgICAgICAjIGlmIHBsaXN0IGlzIGxvYWRlZCBhcyBMYXVuY2hBZ2VudCBvciBMYXVuY2hEYWVtb24sIHVubG9hZCBpdAogICAgICAgIGp1c3RUaGVQbGlzdD0kKC91c3IvYmluL2Jhc2VuYW1lICIkdGFyZ2V0RmlsZSIgfCAvdXNyL2Jpbi9hd2sgLUYucGxpc3QgJ3twcmludCAkMX0nKQogICAgICAgIGlmIFtbICIkbGF1bmNoQWdlbnRDaGVjayIgPX4gJGp1c3RUaGVQbGlzdCBdXTsgdGhlbgogICAgICAgICAgL2Jpbi9sYXVuY2hjdGwgYXN1c2VyICIkbG9nZ2VkSW5Vc2VyVUlEIiAvYmluL2xhdW5jaGN0bCB1bmxvYWQgIiR0YXJnZXRGaWxlIgogICAgICAgICAgZWNobyAiVW5sb2FkZWQgTGF1bmNoQWdlbnQgYXQgJHRhcmdldEZpbGUuIgogICAgICAgIGVsaWYgW1sgIiRsYXVuY2hEYWVtb25DaGVjayIgPX4gJGp1c3RUaGVQbGlzdCBdXTsgdGhlbgogICAgICAgICAgL2Jpbi9sYXVuY2hjdGwgdW5sb2FkICIkdGFyZ2V0RmlsZSIKICAgICAgICAgIGVjaG8gIlVubG9hZGVkIExhdW5jaERhZW1vbiBhdCAkdGFyZ2V0RmlsZS4iCiAgICAgICAgZmkKICAgICAgZmkKICAgICAgIyBkaXNhYmxlIGtleHRzLCBkZWxldGUgYWxsIG90aGVyIGZpbGUgdHlwZXMKICAgICAgaWYgW1sgIiR0YXJnZXRGaWxlIiA9PSAqIi5rZXh0IiBdXTsgdGhlbgogICAgICAgIGFwcEtleHRLaWxsUGF0aD0iL3RtcC8kc2NyaXB0TmFtZSIKICAgICAgICAvYmluL21rZGlyIC1wICIkYXBwS2V4dEtpbGxQYXRoIgogICAgICAgIC9iaW4vbXYgIiR0YXJnZXRGaWxlIiAiJGFwcEtleHRLaWxsUGF0aCIKICAgICAgICBlY2hvICJNb3ZlZCAkdGFyZ2V0RmlsZSB0byAkYXBwS2V4dEtpbGxQYXRoLiBGaWxlIHdpbGwgYmUgZGVsZXRlZCBvbiBzdWJzZXF1ZW50IHJlc3RhcnQuIgogICAgICBlbHNlCiAgICAgICAgL2Jpbi9ybSAtcmYgIiR0YXJnZXRGaWxlIgogICAgICAgIGVjaG8gIlJlbW92ZWQgJHRhcmdldEZpbGUuIgogICAgICBmaQogICAgZmkKICBkb25lCn0KCgoKIyMjIyMjIyMjIyBtYWluIHByb2Nlc3MgIyMjIyMjIyMjIwoKCgojIEVhY2ggZnVuY3Rpb24gd2lsbCBvbmx5IGV4ZWN1dGUgaWYgdGhlIHJlc3BlY3RpdmUgc291cmNlIGFycmF5IGlzIG5vdCBlbXB0eQojIG9yIHVuZGVmaW5lZC4KaWYgW1sgLW4gIiR7dmVuZG9yVW5pbnN0YWxsZXJDb21tYW5kc1sqXX0iIF1dOyB0aGVuCiAgZWNobyAiUnVubmluZyB2ZW5kb3IgdW5pbnN0YWxsZXJzLi4uIgogIHJ1bl92ZW5kb3JfdW5pbnN0YWxsZXJzCmZpCgoKaWYgW1sgLW4gIiR7cHJvY2Vzc05hbWVzWypdfSIgXV07IHRoZW4KICBlY2hvICJRdWl0dGluZyBwcm9jZXNzZXMgKGlmIHJ1bm5pbmcpLi4uIgogIHF1aXRfcHJvY2Vzc2VzCmZpCgoKaWYgW1sgLW4gIiR7cmVzb3VyY2VGaWxlc1sqXX0iIF1dOyB0aGVuCiAgZWNobyAiUmVtb3ZpbmcgZmlsZXMgKGlmIHByZXNlbnQpLi4uIgogIGRlbGV0ZV9maWxlcwpmaQoKCgpleGl0IDA=</script_contents_encoded>
</script>